<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:Keyboard_simulator">

    <!--#region Close-->
    <SolidColorBrush x:Key="WindowControlButtonsClose_MouseOver_False" Color="#CD5151"/>
    <SolidColorBrush x:Key="WindowControlButtonsClose_MouseOver_True" Color="#FF5151"/>
    <!--#endregion-->

    <!--#region Minimize-->
    <SolidColorBrush x:Key="WindowControlButtonsMinimize_MouseOver_False" Color="#C9CD51"></SolidColorBrush>
    <SolidColorBrush x:Key="WindowControlButtonsMinimize_MouseOver_True" Color="#C9FF51"></SolidColorBrush>
    <!--#endregion-->

    <!--#region Default win control button-->
    <SolidColorBrush x:Key="WindowControlButtonsDefalutWithText_MouseOverBackground_False" Color="#CDCDCD"></SolidColorBrush>
    <SolidColorBrush x:Key="WindowControlButtonsDefalutWithText_MouseOverForeground_False" Color="#999999"></SolidColorBrush>
    <SolidColorBrush x:Key="WindowControlButtonsDefalutWithText_MouseOverBackground_True" Color="#FFFFFF"></SolidColorBrush>
    <SolidColorBrush x:Key="WindowControlButtonsDefalutWithText_MouseOverForeground_True" Color="#000000"></SolidColorBrush>
    <!--#endregion-->

    <!--#region DragMove-->
    <SolidColorBrush x:Key="WindowControlButtonsDragMove_MouseOverBackground_False" Color="#CDCDCD"></SolidColorBrush>
    <SolidColorBrush x:Key="WindowControlButtonsDragMove_MouseOverBackground_True" Color="#FFFFFF"></SolidColorBrush>
    <!--#endregion-->

    <!--#region Default background border element-->
    <SolidColorBrush x:Key="DefaultBackgroundBorderElement_Background" Color="#66000000"></SolidColorBrush>
    <CornerRadius x:Key="DefaultBackgroundBorderElement_CornerRadius">10</CornerRadius>
    <!--#endregion-->

    <!--#region TextBox-->
    <SolidColorBrush x:Key="TextBox_Background" Color="#00000000"></SolidColorBrush>
    <FontFamily x:Key="TextBox_FontFamily">Bahnschrift</FontFamily>
    <SolidColorBrush x:Key="TextBox_BorderBrush" Color="#FFFFFF"></SolidColorBrush>
    <SolidColorBrush x:Key="TextBox_Foreground" Color="#FFFFFF"></SolidColorBrush>
    <!--#endregion-->

    <!--#region RadioButton-->
    <FontFamily x:Key="RadioButton_FontFamily">Arial Black</FontFamily>
    <SolidColorBrush x:Key="RadioButton_Foreground" Color="#FFFFFFFF"></SolidColorBrush>
    <SolidColorBrush x:Key="RadioButton_OuterCircle" Color="#FF808080"></SolidColorBrush>
    <SolidColorBrush x:Key="RadioButton_OuterCircle_MouseOver_True" Color="#FFB7B7B7"></SolidColorBrush>
    <SolidColorBrush x:Key="RadioButton_InnerCircle" Color="#FFFFFFFF"></SolidColorBrush>
    <!--#endregion-->

    <!--#region ComboBox-->
    <SolidColorBrush x:Key="ComboBox_Default_Color_1" Color="#66000000"></SolidColorBrush>
    <SolidColorBrush x:Key="ComboBox_Default_Color_2" Color="#888888"></SolidColorBrush>
    <SolidColorBrush x:Key="ComboBox_Default_Color_Arrow" Color="#FFFFFF"></SolidColorBrush>
    <SolidColorBrush x:Key="ComboBox_Default_Color_Foreground" Color="#FFFFFF"></SolidColorBrush>
    <!--#endregion-->

    <!--#region DefaultButton-->
    <SolidColorBrush x:Key="DefaultButton_Foreground" Color="#FFFFFF"></SolidColorBrush>
    <SolidColorBrush x:Key="DefaultButton_Background" Color="#66000000"></SolidColorBrush>
    <SolidColorBrush x:Key="DefaultButton_BorderBrush" Color="#FFFFFF"></SolidColorBrush>
    <FontFamily x:Key="DefaultButton_FontFamily">Bahnschrift</FontFamily>
    <!--#endregion-->

    <!--#region WindowBackgroundTheme-->
    <SolidColorBrush x:Key="WindowBackgroundTheme_Border" Color="#FF000000"></SolidColorBrush>
    <ImageBrush x:Key="WindowBackgroundTheme_ImageBrush" Stretch="UniformToFill" ImageSource="./Mystic_Elegance.png"/>
    <!--#endregion-->

    <!--#region DefaultTextBlock-->
    <FontFamily x:Key="DefaultTextBlock_FontFamily">Bahnschrift</FontFamily>
    <SolidColorBrush x:Key="DefaultTextBlock_Foreground" Color="#FFFFFFFF"></SolidColorBrush>
    <!--#endregion-->

    <!--#region CustomButton-->
    <SolidColorBrush x:Key="CustomButton_Background" Color="#66000000"/>
    <SolidColorBrush x:Key="CustomButton_Foreground" Color="#FFFFFF"/>
    <FontFamily x:Key="CustomButton_FontFamily">Bahnschrift</FontFamily>
    <!--#endregion-->

    <Style x:Key="WindowControlButtonsDefault" TargetType="Button">
        <Setter Property="Height" Value="6"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="3,3,0,0" />
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetProperty="Height" To="16">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetProperty="Height" To="6">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="WindowControlButtonsClose" TargetType="Button" BasedOn="{StaticResource WindowControlButtonsDefault}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="{DynamicResource WindowControlButtonsClose_MouseOver_False}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource WindowControlButtonsClose_MouseOver_True}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="WindowControlButtonsMinimize" TargetType="Button" BasedOn="{StaticResource WindowControlButtonsDefault}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="{DynamicResource WindowControlButtonsMinimize_MouseOver_False}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource WindowControlButtonsMinimize_MouseOver_True}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="WindowControlButtonsDefalutWithText" TargetType="Button" BasedOn="{StaticResource WindowControlButtonsDefault}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="{DynamicResource WindowControlButtonsDefalutWithText_MouseOverBackground_False}"/>
                <Setter Property="Foreground" Value="{DynamicResource WindowControlButtonsDefalutWithText_MouseOverForeground_False}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource WindowControlButtonsDefalutWithText_MouseOverBackground_True}"/>
                <Setter Property="Foreground" Value="{DynamicResource WindowControlButtonsDefalutWithText_MouseOverForeground_True}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="WindowControlButtonsDragMove" TargetType="Border">

        <Setter Property="CornerRadius" Value="3,3,0,0"/>
        <Setter Property="Height" Value="6"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="{DynamicResource WindowControlButtonsDragMove_MouseOverBackground_False}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource WindowControlButtonsDragMove_MouseOverBackground_True}"/>
            </Trigger>
            <EventTrigger RoutedEvent="MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetProperty="Height" To="16">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetProperty="Height" To="6">
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DefaultBackgroundBorderElement" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource DefaultBackgroundBorderElement_Background}"/>
        <Setter Property="CornerRadius" Value="{DynamicResource DefaultBackgroundBorderElement_CornerRadius}"/>
    </Style>
    <Style TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource TextBox_Background}"></Setter>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="FontFamily" Value="{DynamicResource TextBox_FontFamily}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox_BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBox_Foreground}"/>
    </Style>
    <Style TargetType="RadioButton">
        <Setter Property="FontFamily" Value="{DynamicResource RadioButton_FontFamily}"/>
        <Setter Property="Foreground" Value="{DynamicResource RadioButton_Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="25"></ColumnDefinition>
                            <ColumnDefinition></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Ellipse Grid.Column="0" x:Name="OuterCircle" Width="7" Height="7" Fill="{DynamicResource RadioButton_OuterCircle}"/>
                        <Ellipse Grid.Column="0" x:Name="InnerCircle" Width="10" Height="10" Fill="{DynamicResource RadioButton_InnerCircle}" Margin="3"/>
                        <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding Content}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="InnerCircle" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterCircle" Property="Width" Value="8"/>
                            <Setter TargetName="OuterCircle" Property="Height" Value="8"/>
                            <Setter TargetName="OuterCircle" Property="Fill" Value="{DynamicResource RadioButton_OuterCircle_MouseOver_True}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="5"
                  Background="{DynamicResource ComboBox_Default_Color_1}"
                  BorderThickness="0" />
            <Border 
                  Grid.Column="0"
                  CornerRadius="5" 
                  Margin="1" 
                  Background="{DynamicResource ComboBox_Default_Color_1}" 
                  BorderThickness="0,0,1,0" />
            <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="{DynamicResource ComboBox_Default_Color_Arrow}"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="{StaticResource ComboBox_Default_Color_Foreground}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="{StaticResource ComboBox_Default_Color_1}"
                            Foreground="Green"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">

                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="{StaticResource ComboBox_Default_Color_1}"

                                BorderThickness="0"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">

        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{StaticResource ComboBox_Default_Color_Foreground}"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ComboBox_Default_Color_1}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ComboBox_Default_Color_2}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DefaultButton" TargetType="Button">
        <Setter Property="Height" Value="20"/>
        <Setter Property="FontFamily" Value="Bahnschrift"/>
        <Setter Property="Foreground" Value="{StaticResource DefaultButton_Foreground}"/>
        <Setter Property="Background" Value="{StaticResource DefaultButton_Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource DefaultButton_BorderBrush}"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultButton_FontFamily}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5" />
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="BorderThickness" Value="0.5,3,0.5,0.5"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="WindowBackgroundTheme" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundTheme_ImageBrush}"/>
        <Setter Property="CornerRadius" Value="10"/>
        <Setter Property="BorderBrush" Value="{DynamicResource WindowBackgroundTheme_Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    <Style x:Key="DefaultTextBlock" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{DynamicResource DefaultTextBlock_FontFamily}"/>
        <Setter Property="Foreground" Value="{DynamicResource DefaultTextBlock_Foreground}"/>
    </Style>
    <SolidColorBrush x:Key="ProgressBar.Progress" Color="Red"/>
    <SolidColorBrush x:Key="ProgressBar.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ProgressBar.Border" Color="Transparent"/>
    <Style x:Key="ProgressBarStyleTemplate" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Border CornerRadius="2" x:Name="Indicator" Background="{TemplateBinding Foreground}"/>
                            <Border CornerRadius="2" x:Name="Animation" Background="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Border.RenderTransform>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
